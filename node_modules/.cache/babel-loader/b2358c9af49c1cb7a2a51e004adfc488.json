{"ast":null,"code":"import { useState, useLayoutEffect } from 'react';\nimport { shade } from 'polished';\nimport Vibrant from 'node-vibrant';\nimport { hex } from 'wcag-contrast';\nimport { ChainId } from '@uniswap/sdk';\n\nasync function getColorFromToken(token) {\n  if (token.chainId === ChainId.RINKEBY && token.address === '0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735') {\n    return Promise.resolve('#FAAB14');\n  }\n\n  const path = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${token.address}/logo.png`;\n  return Vibrant.from(path).getPalette().then(palette => {\n    if (palette === null || palette === void 0 ? void 0 : palette.Vibrant) {\n      let detectedHex = palette.Vibrant.hex;\n      let AAscore = hex(detectedHex, '#FFF');\n\n      while (AAscore < 3) {\n        detectedHex = shade(0.005, detectedHex);\n        AAscore = hex(detectedHex, '#FFF');\n      }\n\n      return detectedHex;\n    }\n\n    return null;\n  }).catch(() => null);\n}\n\nexport function useColor(token) {\n  const [color, setColor] = useState('#2172E5');\n  useLayoutEffect(() => {\n    let stale = false;\n\n    if (token) {\n      getColorFromToken(token).then(tokenColor => {\n        if (!stale && tokenColor !== null) {\n          setColor(tokenColor);\n        }\n      });\n    }\n\n    return () => {\n      stale = true;\n      setColor('#2172E5');\n    };\n  }, [token]);\n  return color;\n}","map":{"version":3,"sources":["/root/code/solidity/uniswap/uniswap-interface/src/hooks/useColor.ts"],"names":["useState","useLayoutEffect","shade","Vibrant","hex","ChainId","getColorFromToken","token","chainId","RINKEBY","address","Promise","resolve","path","from","getPalette","then","palette","detectedHex","AAscore","catch","useColor","color","setColor","stale","tokenColor"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,eAAnB,QAA0C,OAA1C;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAAgBC,OAAhB,QAA+B,cAA/B;;AAEA,eAAeC,iBAAf,CAAiCC,KAAjC,EAAuE;AACrE,MAAIA,KAAK,CAACC,OAAN,KAAkBH,OAAO,CAACI,OAA1B,IAAqCF,KAAK,CAACG,OAAN,KAAkB,4CAA3D,EAAyG;AACvG,WAAOC,OAAO,CAACC,OAAR,CAAgB,SAAhB,CAAP;AACD;;AAED,QAAMC,IAAI,GAAI,2FAA0FN,KAAK,CAACG,OAAQ,WAAtH;AAEA,SAAOP,OAAO,CAACW,IAAR,CAAaD,IAAb,EACJE,UADI,GAEJC,IAFI,CAECC,OAAO,IAAI;AACf,QAAIA,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEd,OAAb,EAAsB;AACpB,UAAIe,WAAW,GAAGD,OAAO,CAACd,OAAR,CAAgBC,GAAlC;AACA,UAAIe,OAAO,GAAGf,GAAG,CAACc,WAAD,EAAc,MAAd,CAAjB;;AACA,aAAOC,OAAO,GAAG,CAAjB,EAAoB;AAClBD,QAAAA,WAAW,GAAGhB,KAAK,CAAC,KAAD,EAAQgB,WAAR,CAAnB;AACAC,QAAAA,OAAO,GAAGf,GAAG,CAACc,WAAD,EAAc,MAAd,CAAb;AACD;;AACD,aAAOA,WAAP;AACD;;AACD,WAAO,IAAP;AACD,GAbI,EAcJE,KAdI,CAcE,MAAM,IAdR,CAAP;AAeD;;AAED,OAAO,SAASC,QAAT,CAAkBd,KAAlB,EAAiC;AACtC,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,SAAD,CAAlC;AAEAC,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIuB,KAAK,GAAG,KAAZ;;AAEA,QAAIjB,KAAJ,EAAW;AACTD,MAAAA,iBAAiB,CAACC,KAAD,CAAjB,CAAyBS,IAAzB,CAA8BS,UAAU,IAAI;AAC1C,YAAI,CAACD,KAAD,IAAUC,UAAU,KAAK,IAA7B,EAAmC;AACjCF,UAAAA,QAAQ,CAACE,UAAD,CAAR;AACD;AACF,OAJD;AAKD;;AAED,WAAO,MAAM;AACXD,MAAAA,KAAK,GAAG,IAAR;AACAD,MAAAA,QAAQ,CAAC,SAAD,CAAR;AACD,KAHD;AAID,GAfc,EAeZ,CAAChB,KAAD,CAfY,CAAf;AAiBA,SAAOe,KAAP;AACD","sourcesContent":["import { useState, useLayoutEffect } from 'react'\nimport { shade } from 'polished'\nimport Vibrant from 'node-vibrant'\nimport { hex } from 'wcag-contrast'\nimport { Token, ChainId } from '@uniswap/sdk'\n\nasync function getColorFromToken(token: Token): Promise<string | null> {\n  if (token.chainId === ChainId.RINKEBY && token.address === '0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735') {\n    return Promise.resolve('#FAAB14')\n  }\n\n  const path = `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${token.address}/logo.png`\n\n  return Vibrant.from(path)\n    .getPalette()\n    .then(palette => {\n      if (palette?.Vibrant) {\n        let detectedHex = palette.Vibrant.hex\n        let AAscore = hex(detectedHex, '#FFF')\n        while (AAscore < 3) {\n          detectedHex = shade(0.005, detectedHex)\n          AAscore = hex(detectedHex, '#FFF')\n        }\n        return detectedHex\n      }\n      return null\n    })\n    .catch(() => null)\n}\n\nexport function useColor(token?: Token) {\n  const [color, setColor] = useState('#2172E5')\n\n  useLayoutEffect(() => {\n    let stale = false\n\n    if (token) {\n      getColorFromToken(token).then(tokenColor => {\n        if (!stale && tokenColor !== null) {\n          setColor(tokenColor)\n        }\n      })\n    }\n\n    return () => {\n      stale = true\n      setColor('#2172E5')\n    }\n  }, [token])\n\n  return color\n}\n"]},"metadata":{},"sourceType":"module"}