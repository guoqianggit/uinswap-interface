{"ast":null,"code":"import{getVersionUpgrade,minVersionBump,VersionUpgrade}from'@uniswap/token-lists';import{useCallback,useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{useActiveWeb3React}from'../../hooks';import{useFetchListCallback}from'../../hooks/useFetchListCallback';import useInterval from'../../hooks/useInterval';import useIsWindowVisible from'../../hooks/useIsWindowVisible';import{addPopup}from'../application/actions';import{acceptListUpdate}from'./actions';export default function Updater(){var _useActiveWeb3React=useActiveWeb3React(),library=_useActiveWeb3React.library;var dispatch=useDispatch();var lists=useSelector(function(state){return state.lists.byUrl;});var selectedListUrl=useSelector(function(state){return state.lists.selectedListUrl;});var isWindowVisible=useIsWindowVisible();var fetchList=useFetchListCallback();var fetchAllListsCallback=useCallback(function(){if(!isWindowVisible)return;Object.keys(lists).forEach(function(url){return fetchList(url).catch(function(error){return console.debug('interval list fetching error',error);});});},[fetchList,isWindowVisible,lists]);// fetch all lists every 10 minutes, but only after we initialize library\nuseInterval(fetchAllListsCallback,library?1000*60*10:null);// whenever a list is not loaded and not loading, try again to load it\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,library,lists]);// automatically update lists if versions are minor/patch\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(list.current&&list.pendingUpdate){var bump=getVersionUpgrade(list.current.version,list.pendingUpdate.version);switch(bump){case VersionUpgrade.NONE:throw new Error('unexpected no version bump');case VersionUpgrade.PATCH:case VersionUpgrade.MINOR:var min=minVersionBump(list.current.tokens,list.pendingUpdate.tokens);// automatically update minor/patch as long as bump matches the min update\nif(bump>=min){dispatch(acceptListUpdate(listUrl));if(listUrl===selectedListUrl){dispatch(addPopup({key:listUrl,content:{listUpdate:{listUrl:listUrl,oldList:list.current,newList:list.pendingUpdate,auto:true}}}));}}else{console.error(\"List at url \".concat(listUrl,\" could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR\"));}break;case VersionUpgrade.MAJOR:if(listUrl===selectedListUrl){dispatch(addPopup({key:listUrl,content:{listUpdate:{listUrl:listUrl,auto:false,oldList:list.current,newList:list.pendingUpdate}},removeAfterMs:null}));}}}});},[dispatch,lists,selectedListUrl]);return null;}","map":{"version":3,"sources":["/root/code/solidity/uniswap/testInterface/uinswap-interface/src/state/lists/updater.ts"],"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","useCallback","useEffect","useDispatch","useSelector","useActiveWeb3React","useFetchListCallback","useInterval","useIsWindowVisible","addPopup","acceptListUpdate","Updater","library","dispatch","lists","state","byUrl","selectedListUrl","isWindowVisible","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","key","content","listUpdate","oldList","newList","auto","MAJOR","removeAfterMs"],"mappings":"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","sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { useCallback, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { addPopup } from '../application/actions'\nimport { AppDispatch, AppState } from '../index'\nimport { acceptListUpdate } from './actions'\n\nexport default function Updater(): null {\n  const { library } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const lists = useSelector<AppState, AppState['lists']['byUrl']>(state => state.lists.byUrl)\n  const selectedListUrl = useSelector<AppState, AppState['lists']['selectedListUrl']>(\n    state => state.lists.selectedListUrl\n  )\n\n  const isWindowVisible = useIsWindowVisible()\n\n  const fetchList = useFetchListCallback()\n\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach(url =>\n      fetchList(url).catch(error => console.debug('interval list fetching error', error))\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n              if (listUrl === selectedListUrl) {\n                dispatch(\n                  addPopup({\n                    key: listUrl,\n                    content: {\n                      listUpdate: {\n                        listUrl,\n                        oldList: list.current,\n                        newList: list.pendingUpdate,\n                        auto: true\n                      }\n                    }\n                  })\n                )\n              }\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n\n          case VersionUpgrade.MAJOR:\n            if (listUrl === selectedListUrl) {\n              dispatch(\n                addPopup({\n                  key: listUrl,\n                  content: {\n                    listUpdate: {\n                      listUrl,\n                      auto: false,\n                      oldList: list.current,\n                      newList: list.pendingUpdate\n                    }\n                  },\n                  removeAfterMs: null\n                })\n              )\n            }\n        }\n      }\n    })\n  }, [dispatch, lists, selectedListUrl])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}